from aiogram import F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from .base import BaseHandler, DatabaseMixin
from database.models import Announcement
from services import AISearchService
from utils import messages
from typing import List


class SearchForm(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞"""
    search_query = State()


class SearchHandler(BaseHandler, DatabaseMixin):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ AI-—Ä–µ—à–µ–Ω–∏–π"""

    def __init__(self):
        super().__init__()
        self.ai_search = AISearchService()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.router.callback_query(F.data == "search_announcements")(self.start_search)
        self.router.message(SearchForm.search_query)(self.process_search_query)
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
        self.router.callback_query(F.data.startswith("view_solution_"))(self.view_solution_details)
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞
        self.router.callback_query(F.data == "cancel_search")(self.cancel_search)

    @staticmethod
    async def start_search(callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ AI-—Ä–µ—à–µ–Ω–∏–π"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
            cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=messages.get_message('search', 'buttons', 'cancel'),
                    callback_data="cancel_search"
                )]
            ])

            await callback.message.answer(
                messages.get_message('search', 'enter_search_query'),
                parse_mode='HTML',
                reply_markup=cancel_keyboard
            )
            await state.set_state(SearchForm.search_query)
            await callback.answer()

        except Exception as e:
            await callback.message.answer(
                messages.get_message('search', 'search_error', error=str(e))
            )

    async def process_search_query(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–º–æ—â—å—é AI"""
        try:
            search_query = message.text.strip()

            if not search_query:
                await message.answer(
                    messages.get_message('search', 'enter_search_query'),
                    parse_mode='HTML'
                )
                return

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await message.answer("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é AI...")

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            all_announcements = self.safe_db_operation(
                self._get_all_approved_announcements
            )

            if not all_announcements:
                await processing_msg.edit_text(
                    "üòî –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö AI-—Ä–µ—à–µ–Ω–∏–π"
                )
                await state.clear()
                return

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            search_result = await self.ai_search.smart_search(search_query, all_announcements)

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await processing_msg.delete()

            if not search_result["found"]:
                await message.answer(
                    f"ü§ñ {search_result['explanation']}\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"
                )
            else:
                await self._send_ai_search_results(message, search_result, search_query)

        except Exception as e:
            await message.answer(
                messages.get_message('search', 'search_error', error=str(e))
            )
        finally:
            await state.clear()

    async def view_solution_details(self, callback: CallbackQuery):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—à–µ–Ω–∏–∏"""
        try:
            solution_id = int(callback.data.split("_")[-1])

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—à–µ–Ω–∏–∏ –∏–∑ –ë–î
            announcement_data = self.safe_db_operation(
                self._get_announcement_for_contact, solution_id
            )

            if not announcement_data:
                await callback.message.answer(
                    messages.get_message('moderation', 'announcement_not_found')
                )
                return

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            details_text = messages.get_message(
                'search', 'solution_details_template',
                bot_name=announcement_data['bot_name'],
                bot_function=announcement_data['bot_function'],
                created_date=announcement_data['created_date'].strftime('%d.%m.%Y')
            )

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–≤—è–∑–∏
            keyboard = [
                [InlineKeyboardButton(
                    text=messages.get_message('search', 'buttons', 'contact_author'),
                    url=f"tg://user?id={announcement_data['user_id']}"
                )]
            ]

            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

            await callback.message.answer(
                details_text,
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            await callback.answer()

        except Exception as e:
            await callback.message.answer(
                messages.get_message('search', 'search_error', error=str(e))
            )

    @staticmethod
    async def cancel_search(callback: CallbackQuery, state: FSMContext):
        """–û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞"""
        try:
            await state.clear()

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            from .start_handler import StartHandler
            start_handler = StartHandler()
            await start_handler.show_main_menu(callback.message)

            await callback.message.answer(
                messages.get_message('search', 'search_cancelled'),
                parse_mode='HTML'
            )
            await callback.answer()

        except Exception as e:
            await callback.message.answer(
                messages.get_message('search', 'search_error', error=str(e))
            )

    @staticmethod
    def _get_announcement_for_contact(session, announcement_id: int) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        announcement = session.query(Announcement).filter(
            Announcement.id == announcement_id,
            Announcement.is_approved == True
        ).first()

        if announcement:
            return {
                'id': announcement.id,
                'bot_name': announcement.bot_name,
                'bot_function': announcement.bot_function,
                'user_id': announcement.user_id,
                'created_date': announcement.created_at
            }
        return None

    @staticmethod
    def _get_all_approved_announcements(session):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è AI –ø–æ–∏—Å–∫–∞"""
        announcements = session.query(Announcement).filter(
            Announcement.is_approved == True
        ).order_by(Announcement.created_at.desc()).all()

        return [
            {
                'id': ann.id,
                'user_id': ann.user_id,
                'chat_id': ann.chat_id,
                'bot_name': ann.bot_name,
                'bot_function': ann.bot_function,
                'is_approved': ann.is_approved,
                'created_at': ann.created_at
            }
            for ann in announcements
        ]

    def _get_announcement_by_id_detailed(self, session, announcement_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏"""
        announcement = self.get_announcement_by_id(session, announcement_id)
        if not announcement:
            return None

        return {
            'id': announcement.id,
            'user_id': announcement.user_id,
            'chat_id': announcement.chat_id,
            'bot_name': announcement.bot_name,
            'bot_function': announcement.bot_function,
            'is_approved': announcement.is_approved,
            'created_at': announcement.created_at
        }

    async def _send_ai_search_results(self, message: Message, search_result: dict, query: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ AI –ø–æ–∏—Å–∫–∞"""
        results = search_result["results"]
        explanation = search_result["explanation"]

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –æ—Ç AI
        header_text = f"ü§ñ {explanation}\n\nüéØ –ù–∞–π–¥–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–π: {len(results)}\nüîç –ü–æ –∑–∞–ø—Ä–æ—Å—É: \"{query}\"\n\n"
        await message.answer(header_text, parse_mode='HTML')

        if len(results) == 1:
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –æ–¥–Ω–æ —Ä–µ—à–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –¥–µ—Ç–∞–ª—å–Ω–æ
            solution = results[0]
            await self._send_detailed_solution(message, solution)
        else:
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞
            await self._send_solutions_list(message, results)

    @staticmethod
    async def _send_detailed_solution(message: Message, solution: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–¥–Ω–æ–º —Ä–µ—à–µ–Ω–∏–∏"""
        ai_explanation = solution.get('ai_explanation', '')
        relevance_score = solution.get('relevance_score', 0)

        solution_text = (
            f"ü§ñ <b>{solution['bot_name']}</b>\n"
            f"‚ö° <i>{solution['bot_function']}</i>\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {solution['created_at'].strftime('%d.%m.%Y')}\n"
        )

        if ai_explanation:
            solution_text += f"üéØ <i>–ü–æ—á–µ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç: {ai_explanation}</i>\n"

        if relevance_score:
            solution_text += f"üìä –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {relevance_score}/10\n"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text=messages.get_message('search', 'buttons', 'contact_author'),
                    url=f"tg://user?id={solution['chat_id']}"
                )]
            ]
        )

        await message.answer(
            solution_text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )

    @staticmethod
    async def _send_solutions_list(message: Message, solutions: List[dict]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Ä–µ—à–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞"""
        keyboard = []
        for i, result in enumerate(solutions[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üìã {i}. {result['bot_name'][:30]}...",
                    callback_data=f"view_solution_{result['id']}"
                )
            ])

        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        for i, result in enumerate(solutions[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            solution_text = (
                f"ü§ñ <b>{i}. {result['bot_name']}</b>\n"
                f"‚ö° <i>{result['bot_function'][:100]}{'...' if len(result['bot_function']) > 100 else ''}</i>\n"
            )

            await message.answer(
                solution_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
