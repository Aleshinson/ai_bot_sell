from aiogram import F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from .base import BaseHandler, DatabaseMixin
from database.models import Announcement
from services import AISearchService
from utils import messages
from typing import List


class SearchForm(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞."""
    search_query = State()


class SearchHandler(BaseHandler, DatabaseMixin):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ AI-—Ä–µ—à–µ–Ω–∏–π."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–∏—Å–∫–∞."""
        super().__init__()
        self.ai_search = AISearchService()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        self.router.callback_query(F.data == 'search_announcements')(self.start_search)
        self.router.message(SearchForm.search_query)(self.process_search_query)
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
        self.router.callback_query(F.data.startswith('view_solution_'))(self.view_solution_details)
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞
        self.router.callback_query(F.data == 'cancel_search')(self.cancel_search)


    @staticmethod
    async def start_search(callback: CallbackQuery, state: FSMContext):
        """
        –ù–∞—á–∞–ª–æ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ AI-—Ä–µ—à–µ–Ω–∏–π.
        
        Args:
            callback: –û–±—ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
            state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
            cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=messages.get_message('search', 'buttons', 'cancel'),
                    callback_data='cancel_search'
                )]
            ])

            await callback.message.edit_text(
                messages.get_message('search', 'enter_search_query'),
                parse_mode='HTML',
                reply_markup=cancel_keyboard
            )
            await state.set_state(SearchForm.search_query)
            await callback.answer()

        except Exception as e:
            await callback.message.answer(
                messages.get_message('search', 'search_error', error=str(e))
            )


    async def process_search_query(self, message: Message, state: FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–º–æ—â—å—é AI.
        
        Args:
            message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        """
        try:
            search_query = message.text.strip()

            if not search_query:
                await message.answer(
                    messages.get_message('search', 'enter_search_query'),
                    parse_mode='HTML'
                )
                return

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await message.answer('ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...')

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            all_announcements = self.safe_db_operation(
                self._get_all_approved_announcements
            )

            if not all_announcements:
                await processing_msg.edit_text(
                    'üòî –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö AI-—Ä–µ—à–µ–Ω–∏–π'
                )
                await state.clear()
                return

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            search_result = await self.ai_search.smart_search(search_query, all_announcements)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
            if not search_result['found']:
                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç
                no_results_text = (
                    'üîç –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n'
                    'üí¨ –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ, —á—Ç–æ –∏–º–µ–µ—Ç—Å—è —É –Ω–∞—Å'
                )

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —á–∞—Ç
                chat_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text='üí¨ –ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç',
                        url=self.get_chat_url()
                    )]
                ])

                await message.answer(
                    no_results_text,
                    reply_markup=chat_keyboard,
                    parse_mode='HTML'
                )
            else:
                results = search_result['results']

                if len(results) == 1:
                    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é
                    await self._show_full_announcement(message, results[0])
                else:
                    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –º–Ω–æ–≥–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    await self._show_announcements_list(message, results)

            await state.clear()

        except Exception as e:
            await message.answer(
                messages.get_message('search', 'search_error', error=str(e))
            )


    async def view_solution_details(self, callback: CallbackQuery):
        """
        –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—à–µ–Ω–∏–∏.
        
        Args:
            callback: –û–±—ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        """
        try:
            solution_id = int(callback.data.split('_')[-1])

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—à–µ–Ω–∏–∏ –∏–∑ –ë–î
            announcement_data = self.safe_db_operation(
                self._get_full_announcement_by_id, solution_id
            )

            if not announcement_data:
                await callback.message.answer(
                    messages.get_message('moderation', 'announcement_not_found')
                )
                return

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await self._show_full_announcement(callback.message, announcement_data)
            await callback.answer()

        except Exception as e:
            await callback.message.answer(
                messages.get_message('search', 'search_error', error=str(e))
            )


    async def _show_full_announcement(self, message: Message, announcement: dict):
        """
        –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.
        
        Args:
            message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            announcement: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        """
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏
            full_text = (
                f"ü§ñ <b>{announcement['bot_name']}</b>\n\n"
                f"‚ö° <b>–ü—Ä–æ–±–ª–µ–º–∞:</b>\n{announcement['bot_function']}\n\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if announcement.get('solution_description'):
                full_text += f"üéØ <b>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:</b>\n{announcement['solution_description']}\n\n"

            if announcement.get('included_features'):
                full_text += f"üì¶ <b>–í–∫–ª—é—á–µ–Ω–æ:</b>\n{announcement['included_features']}\n\n"

            if announcement.get('client_requirements'):
                full_text += f"üìã <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–ª–∏–µ–Ω—Ç—É:</b>\n{announcement['client_requirements']}\n\n"

            if announcement.get('launch_time'):
                full_text += f"‚è±Ô∏è <b>–°—Ä–æ–∫ –∑–∞–ø—É—Å–∫–∞:</b> {announcement['launch_time']}\n\n"

            if announcement.get('price'):
                full_text += f"üí∞ <b>–¶–µ–Ω–∞:</b> {announcement['price']}\n\n"

            if announcement.get('complexity'):
                full_text += f"üìä <b>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</b> {announcement['complexity']}\n\n"

            full_text += f"üìÖ <b>–°–æ–∑–¥–∞–Ω–æ:</b> {announcement['created_at'].strftime('%d.%m.%Y')}"

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–≤—Ç–æ—Ä–æ–º
            contact_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=messages.get_message('search', 'buttons', 'contact_author'),
                    url=f"tg://user?id={announcement['user_id']}"
                )]
            ])

            await message.answer(
                full_text,
                reply_markup=contact_keyboard,
                parse_mode='HTML'
            )

        except Exception as e:
            await message.answer(
                messages.get_message('search', 'search_error', error=str(e))
            )


    async def _show_announcements_list(self, message: Message, announcements: List[dict]):
        """
        –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏.
        
        Args:
            message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            announcements: –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ GPT
            short_descriptions = await self.ai_search.create_short_descriptions(announcements)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞
            list_text = "üìã <b>–ù–∞–π–¥–µ–Ω–Ω—ã–µ AI-—Ä–µ—à–µ–Ω–∏—è:</b>\n\n"

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            keyboard = []

            for i, announcement in enumerate(announcements[:10], 1):  # –ú–∞–∫—Å–∏–º—É–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç GPT –∏–ª–∏ fallback
                short_desc = short_descriptions.get(
                    str(announcement['id']),
                    announcement['bot_function'][:50] + '...'
                )

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞
                list_text += f"{i}. <b>{announcement['bot_name']}</b>\n"
                list_text += f"   {short_desc}\n\n"

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"{i}. {announcement['bot_name']}",
                        callback_data=f"view_solution_{announcement['id']}"
                    )
                ])

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
            await message.answer(
                list_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )

        except Exception as e:
            await message.answer(
                messages.get_message('search', 'search_error', error=str(e))
            )


    @staticmethod
    async def cancel_search(callback: CallbackQuery, state: FSMContext):
        """
        –û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞.
        
        Args:
            callback: –û–±—ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
            state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        """
        try:
            await state.clear()

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            from .start_handler import StartHandler
            start_handler = StartHandler()
            keyboard = start_handler._create_main_menu_keyboard()
            welcome_text = messages.get_message('start_command', 'welcome_message')

            await callback.message.edit_text(
                welcome_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            await callback.answer()

        except Exception as e:
            await callback.message.answer(
                messages.get_message('search', 'search_error', error=str(e))
            )


    @staticmethod
    def get_chat_url():
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ URL —á–∞—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è.
        
        Returns:
            URL —á–∞—Ç–∞
        """
        from config import Config
        return Config.CHAT_URL


    @staticmethod
    def _get_all_approved_announcements(session):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è AI –ø–æ–∏—Å–∫–∞.
        
        Args:
            session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            –°–ø–∏—Å–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        """
        announcements = session.query(Announcement).filter(
            Announcement.is_approved == True
        ).order_by(Announcement.created_at.desc()).all()

        return [
            {
                'id': ann.id,
                'user_id': ann.user_id,
                'chat_id': ann.chat_id,
                'bot_name': ann.bot_name,
                'bot_function': ann.bot_function,
                'solution_description': ann.solution_description,
                'included_features': ann.included_features,
                'client_requirements': ann.client_requirements,
                'launch_time': ann.launch_time,
                'price': ann.price,
                'complexity': ann.complexity,
                'is_approved': ann.is_approved,
                'created_at': ann.created_at
            }
            for ann in announcements
        ]


    @staticmethod
    def _get_full_announcement_by_id(session, announcement_id: int):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –ø–æ ID.
        
        Args:
            session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            announcement_id: ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ None
        """
        announcement = session.query(Announcement).filter(
            Announcement.id == announcement_id,
            Announcement.is_approved == True
        ).first()

        if announcement:
            return {
                'id': announcement.id,
                'user_id': announcement.user_id,
                'chat_id': announcement.chat_id,
                'bot_name': announcement.bot_name,
                'bot_function': announcement.bot_function,
                'solution_description': announcement.solution_description,
                'included_features': announcement.included_features,
                'client_requirements': announcement.client_requirements,
                'launch_time': announcement.launch_time,
                'price': announcement.price,
                'complexity': announcement.complexity,
                'is_approved': announcement.is_approved,
                'created_at': announcement.created_at
            }
        return None