from aiogram import F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from .base import BaseHandler, DatabaseMixin
from utils import messages
from config import Config


class AnnouncementForm(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    bot_name = State()
    bot_function = State()
    solution_description = State()
    included_features = State()
    client_requirements = State()
    launch_time = State()
    price = State()
    complexity = State()


class AnnouncementHandler(BaseHandler, DatabaseMixin):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""

    def __init__(self):
        self.moderator_ids = getattr(Config, 'MODERATOR_IDS', [454590867, 591273485, 1146006262])
        super().__init__()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.router.callback_query(F.data == "add_announcement")(self.start_announcement_creation)
        self.router.message(AnnouncementForm.bot_name)(self.process_bot_name)
        self.router.message(AnnouncementForm.bot_function)(self.process_bot_function)
        self.router.message(AnnouncementForm.solution_description)(self.process_solution_description)
        self.router.message(AnnouncementForm.included_features)(self.process_included_features)
        self.router.message(AnnouncementForm.client_requirements)(self.process_client_requirements)
        self.router.message(AnnouncementForm.launch_time)(self.process_launch_time)
        self.router.message(AnnouncementForm.price)(self.process_price)
        self.router.callback_query(F.data.startswith("complexity_"))(self.process_complexity)
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        self.router.callback_query(F.data == "cancel_announcement")(self.cancel_announcement)

    async def start_announcement_creation(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
            cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=messages.get_message('announcement_creation', 'buttons', 'cancel'),
                    callback_data="cancel_announcement"
                )]
            ])

            await callback.message.answer(
                messages.get_message('announcement_creation', 'enter_bot_name'),
                parse_mode='HTML',
                reply_markup=cancel_keyboard
            )
            await state.set_state(AnnouncementForm.bot_name)
            await callback.answer()

        except Exception as e:
            await self.send_error_message(callback, 'general_error', error=str(e))

    async def process_bot_name(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–æ—Ç–∞"""
        try:
            await state.update_data(bot_name=message.text)

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
            cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=messages.get_message('announcement_creation', 'buttons', 'cancel'),
                    callback_data="cancel_announcement"
                )]
            ])

            await message.answer(
                messages.get_message('announcement_creation', 'enter_bot_function'),
                parse_mode='HTML',
                reply_markup=cancel_keyboard
            )
            await state.set_state(AnnouncementForm.bot_function)

        except Exception as e:
            await self.send_error_message(message, 'general_error', error=str(e))

    async def process_bot_function(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞"""
        try:
            await state.update_data(bot_function=message.text)

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
            cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=messages.get_message('announcement_creation', 'buttons', 'cancel'),
                    callback_data="cancel_announcement"
                )]
            ])

            await message.answer(
                messages.get_message('announcement_creation', 'enter_solution_description'),
                parse_mode='HTML',
                reply_markup=cancel_keyboard
            )
            await state.set_state(AnnouncementForm.solution_description)

        except Exception as e:
            await self.send_error_message(message, 'general_error', error=str(e))

    async def process_solution_description(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞"""
        try:
            await state.update_data(solution_description=message.text)

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
            cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=messages.get_message('announcement_creation', 'buttons', 'cancel'),
                    callback_data="cancel_announcement"
                )]
            ])

            await message.answer(
                messages.get_message('announcement_creation', 'enter_included_features'),
                parse_mode='HTML',
                reply_markup=cancel_keyboard
            )
            await state.set_state(AnnouncementForm.included_features)

        except Exception as e:
            await self.send_error_message(message, 'general_error', error=str(e))

    async def process_included_features(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        try:
            await state.update_data(included_features=message.text)

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
            cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=messages.get_message('announcement_creation', 'buttons', 'cancel'),
                    callback_data="cancel_announcement"
                )]
            ])

            await message.answer(
                messages.get_message('announcement_creation', 'enter_client_requirements'),
                parse_mode='HTML',
                reply_markup=cancel_keyboard
            )
            await state.set_state(AnnouncementForm.client_requirements)

        except Exception as e:
            await self.send_error_message(message, 'general_error', error=str(e))

    async def process_client_requirements(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –∫–ª–∏–µ–Ω—Ç—É"""
        try:
            await state.update_data(client_requirements=message.text)

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
            cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=messages.get_message('announcement_creation', 'buttons', 'cancel'),
                    callback_data="cancel_announcement"
                )]
            ])

            await message.answer(
                messages.get_message('announcement_creation', 'enter_launch_time'),
                parse_mode='HTML',
                reply_markup=cancel_keyboard
            )
            await state.set_state(AnnouncementForm.launch_time)

        except Exception as e:
            await self.send_error_message(message, 'general_error', error=str(e))

    async def process_launch_time(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–æ–∫–∞ –∑–∞–ø—É—Å–∫–∞"""
        try:
            await state.update_data(launch_time=message.text)

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
            cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=messages.get_message('announcement_creation', 'buttons', 'cancel'),
                    callback_data="cancel_announcement"
                )]
            ])

            await message.answer(
                messages.get_message('announcement_creation', 'enter_price'),
                parse_mode='HTML',
                reply_markup=cancel_keyboard
            )
            await state.set_state(AnnouncementForm.price)

        except Exception as e:
            await self.send_error_message(message, 'general_error', error=str(e))

    async def process_price(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "–ø–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"
            if "–ø–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏" in message.text.lower():
                await message.answer(
                    '‚ùå –ù–µ–ª—å–∑—è —É–∫–∞–∑—ã–≤–∞—Ç—å "–ø–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏". –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ü–µ–Ω—É.',
                    parse_mode='HTML'
                )
                return

            await state.update_data(price=message.text)

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            complexity_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üü¢ –ù–∏–∑–∫–∞—è ‚Äî –±–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π",
                        callback_data="complexity_low"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üü° –°—Ä–µ–¥–Ω—è—è ‚Äî –Ω—É–∂–Ω—ã —à–∞–±–ª–æ–Ω—ã, –Ω–æ –±–µ–∑ API",
                        callback_data="complexity_medium"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üî¥ –í—ã—Å–æ–∫–∞—è ‚Äî –≥–ª—É–±–æ–∫–∞—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è, CRM, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
                        callback_data="complexity_high"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∞",
                        callback_data="cancel_announcement"
                    )
                ]
            ])

            await message.answer(
                messages.get_message('announcement_creation', 'enter_complexity'),
                parse_mode='HTML',
                reply_markup=complexity_keyboard
            )
            await state.set_state(AnnouncementForm.complexity)

        except Exception as e:
            await self.send_error_message(message, 'general_error', error=str(e))

    async def process_complexity(self, callback_query: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑ callback_data
            complexity = callback_query.data.replace("complexity_", "")

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            complexity_map = {
                "low": "üü¢ –ù–∏–∑–∫–∞—è ‚Äî –±–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π",
                "medium": "üü° –°—Ä–µ–¥–Ω—è—è ‚Äî –Ω—É–∂–Ω—ã —à–∞–±–ª–æ–Ω—ã, –Ω–æ –±–µ–∑ API",
                "high": "üî¥ –í—ã—Å–æ–∫–∞—è ‚Äî –≥–ª—É–±–æ–∫–∞—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è, CRM, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"
            }

            await state.update_data(complexity=complexity_map[complexity])

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            bot_name = data.get('bot_name')
            bot_function = data.get('bot_function')
            solution_description = data.get('solution_description')
            included_features = data.get('included_features')
            client_requirements = data.get('client_requirements')
            launch_time = data.get('launch_time')
            price = data.get('price')
            complexity = data.get('complexity')

            # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —Å –ë–î
            announcement = self.safe_db_operation(
                self._create_announcement_in_db,
                callback_query.from_user.id,
                callback_query.message.chat.id,
                bot_name,
                bot_function,
                solution_description,
                included_features,
                client_requirements,
                launch_time,
                price,
                complexity
            )

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
            await self._notify_moderators(callback_query.message, announcement)

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await callback_query.message.answer(
                messages.get_message('announcement_creation', 'announcement_sent',
                                   announcement_id=announcement['id']),
                parse_mode='HTML'
            )

            await state.clear()

        except Exception as e:
            await callback_query.message.answer(
                messages.get_message('announcement_creation', 'save_error', error=str(e)),
                parse_mode='HTML'
            )
            await state.clear()

    async def cancel_announcement(self, callback_query: CallbackQuery, state: FSMContext):
        """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        try:
            await state.clear()
            await callback_query.message.answer(
                messages.get_message('announcement_creation', 'cancelled'),
                parse_mode='HTML'
            )
        except Exception as e:
            await self.send_error_message(callback_query.message, 'general_error', error=str(e))

    def _create_announcement_in_db(self, session, user_id: int, chat_id: int,
                                       bot_name: str, bot_function: str, solution_description: str,
                                       included_features: str, client_requirements: str,
                                       launch_time: str, price: str, complexity: str) -> dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        announcement = self.create_announcement(session, user_id, chat_id, bot_name, bot_function,
                                              solution_description, included_features, client_requirements,
                                              launch_time, price, complexity)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞
        return {
            'id': announcement.id,
            'user_id': announcement.user_id,
            'chat_id': announcement.chat_id,
            'bot_name': announcement.bot_name,
            'bot_function': announcement.bot_function,
            'solution_description': announcement.solution_description,
            'included_features': announcement.included_features,
            'client_requirements': announcement.client_requirements,
            'launch_time': announcement.launch_time,
            'price': announcement.price,
            'complexity': announcement.complexity,
            'is_approved': announcement.is_approved,
            'created_at': announcement.created_at
        }

    async def _notify_moderators(self, message: Message, announcement: dict):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏"""
        print(f"Debug: Notifying moderators. Announcement data - ID: {announcement.get('id', 'N/A')}, Bot Name: {announcement.get('bot_name', 'N/A')}, Bot Function: {announcement.get('bot_function', 'N/A')}")
        try:
            # Format the created date if available, or use a default
            created_date = announcement.get('created_at', 'N/A')
            if created_date != 'N/A' and hasattr(created_date, 'strftime'):
                created_date = created_date.strftime('%Y-%m-%d %H:%M:%S')

            notification_text = messages.get_message(
                'moderation', 'new_announcement_template',
                announcement_id=announcement.get('id', 'unknown'),
                bot_name=announcement.get('bot_name', 'unknown'),
                bot_function=announcement.get('bot_function', 'unknown'),
                solution_description=announcement.get('solution_description', 'unknown'),
                included_features=announcement.get('included_features', 'unknown'),
                client_requirements=announcement.get('client_requirements', 'unknown'),
                launch_time=announcement.get('launch_time', 'unknown'),
                price=announcement.get('price', 'unknown'),
                complexity=announcement.get('complexity', 'unknown'),
                username=announcement.get('user_id', 'unknown_user'),
                created_date=created_date
            )
        except Exception as e:
            print(f"Error in get_message: {e}. Fallback to default message.")
            notification_text = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω."
        moderation_keyboard = self._create_moderation_keyboard(announcement.get('id', 0), announcement.get('chat_id', 0))
        for mod_id in self.moderator_ids:
            try:
                await message.bot.send_message(
                    mod_id,
                    notification_text,
                    parse_mode='HTML',
                    reply_markup=moderation_keyboard
                )
            except Exception:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
                continue

    def _create_moderation_keyboard(self, announcement_id: int, chat_id: int) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        buttons = [
            [
                InlineKeyboardButton(
                    text=messages.get_button_text('moderation', 'approve'),
                    callback_data=f"approve_{announcement_id}"
                ),
                InlineKeyboardButton(
                    text=messages.get_button_text('moderation', 'reject'),
                    callback_data=f"reject_{announcement_id}"
                ),
                InlineKeyboardButton(
                    text=messages.get_button_text('moderation', 'contact'),
                    url=f"tg://user?id={chat_id}"
                )
            ]
        ]

        return InlineKeyboardMarkup(inline_keyboard=buttons)
